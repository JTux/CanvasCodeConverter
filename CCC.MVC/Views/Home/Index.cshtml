@model CCC.MVC.Models.CodeModel

@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { style = "width: 100%;" }))
        {
            @Html.TextAreaFor(m => m.Input, new { id = "inputText", style = "display:none;" })

            <h3 class="box-header">Insert Code Here</h3>
            @Html.TextAreaFor(m => m.MoreWords, new { id = "userInput", @class = "code-box" })
            <div class="control-container">
                <div>
                    @Html.ActionLink("Reset", "Index", null, new { @class = "btn btn-danger", style = "border: solid 1px lightgrey" })
                </div>
                <div>
                    <button class="btn @(Model.IsCodeTag ? "btn-info" : "btn-primary") codeTag-button">@(Model.IsCodeTag ? "Code Tag" : "Pre Tag")</button>
                    @Html.CheckBoxFor(m => m.IsCodeTag, new { @class = "codeTag-checkbox", style = "display: none;", @checked = Model.IsCodeTag })
                </div>
                <div>
                    <button class="btn @(Model.IsTerminal ? "btn-terminal" : "btn-primary") terminal-button">Terminal Display</button>
                    @Html.CheckBoxFor(m => m.IsTerminal, new { @class = "terminal-checkbox", style = "display: none;", @checked = Model.IsTerminal })
                </div>
                <div>
                    <button class="btn @(Model.IsCopyable ? "btn-warning" : "btn-primary") copyable-button">Copyable</button>
                    @Html.CheckBoxFor(m => m.IsCopyable, new { @class = "copyable-checkbox", style = "display: none;", @checked = Model.IsCopyable })
                </div>
                <div>
                    <button class="btn @(Model.HasLineNumbers ? "btn-success" : "btn-primary") line-number-button">Line Numbers</button>
                    @Html.CheckBoxFor(m => m.HasLineNumbers, new { @class = "line-number-checkbox", style = "display: none;" })
                    @Html.LabelFor(m => m.StartingLineNumber)
                    @Html.TextBoxFor(m => m.StartingLineNumber, new { id = "startingLineNumber" })
                </div>
                <div>
                    <input type="submit" value="Convert" class="btn btn-primary" style="float: right;" />
                </div>
            </div>
        }
    </div>
    <div class="col-md-6">
        <h3 class="box-header">Copy Canvas Compatible Code Here</h3>
        <div class="code-box endme">
            @Html.DisplayFor(m => m.Output)
        </div>
        <div onclick="copyTextToClipboard()" class="btn btn-primary" style="float: right; margin-top: 5px">Copy to Clipboard</div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $('#userInput').on('input', function () {
            var linebreakText = $('#userInput').val().replace(/[\r\n|\r|\n]/ig, "reeeturn");
            var text = linebreakText.replace(/[\s \s]/ig, "&nbsp;");
            $('#inputText').val(text);
        });
    });
</script>

<script>
    function copyTextToClipboard() {
        var textArea = document.querySelector('.endme');

        if (document.selection) { // IE
            var range = document.body.createTextRange();
            range.moveToElementText(textArea);
            range.select();
        } else if (window.getSelection) {
            var range = document.createRange();
            range.selectNode(textArea);
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
        }

        try {
            var successful = document.execCommand('copy');
        } catch (err) {
            console.log('Oops, unable to copy');
        }
    }

</script>

<script>
    function addOnClickToggle(buttonClass, checkBoxClass, activeClass, inactiveClass, extraSteps) {
        let button = document.querySelector(buttonClass);
        let checkbox = document.querySelector(checkBoxClass);
        button.addEventListener('click', e => {
            e.preventDefault();
            checkbox.checked = !checkbox.checked;

            if (checkbox.checked) {
                button.classList.remove(inactiveClass ?? 'btn-primary');
                button.classList.add(activeClass ?? 'btn-success');
            } else {
                button.classList.remove(activeClass ?? 'btn-success');
                button.classList.add(inactiveClass ?? 'btn-primary');
            }

            if (extraSteps) {
                extraSteps();
            }
        });
    }

    function toggleLineNumbers() {
        let checkbox = document.querySelector('.line-number-checkbox');
        let lineNumInput = document.querySelector('#startingLineNumber');

        checkbox.checked
            ? lineNumInput.disabled = false
            : lineNumInput.disabled = true;
    }

    function toggleCodeTag() {
        let button = document.querySelector('.codeTag-button');
        let checkbox = document.querySelector('.codeTag-checkbox');

        button.textContent = checkbox.checked ? 'Code Tag' : 'Pre Tag';
    }

    addOnClickToggle('.terminal-button', '.terminal-checkbox', 'btn-terminal');
    addOnClickToggle('.copyable-button', '.copyable-checkbox', 'btn-warning');
    addOnClickToggle('.line-number-button', '.line-number-checkbox', 'btn-success', null, toggleLineNumbers);
    addOnClickToggle('.codeTag-button', '.codeTag-checkbox', 'btn-info', null, toggleCodeTag);
</script>