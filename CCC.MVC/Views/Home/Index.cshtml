@model CCC.MVC.Models.CodeModel

@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <div class="col-md-6">
        @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { style = "width: 100%;" }))
        {
            @Html.TextAreaFor(m => m.Input, new { id = "inputText", style = "display:none;" })

            <h3 class="box-header">Insert Code Here</h3>
            @Html.TextAreaFor(m => m.MoreWords, new { id = "userInput", @class = "code-box" })
    <div class="control-container">
        <div>
            @Html.ActionLink("Reset", "Index", null, new { @class = "btn btn-danger", style = "border: solid 1px lightgrey" })
        </div>
        <div>
            <button class="btn @(Model.IsTerminal ? "btn-terminal" : "btn-primary") terminal-button">Terminal Display</button>
            @Html.CheckBoxFor(m => m.IsTerminal, new { @class = "terminal-checkbox", style = "display: none;", @checked = Model.IsTerminal })
        </div>
        <div>
            <button class="btn @(Model.IsCopyable ? "btn-warning" : "btn-primary") copyable-button">Copyable</button>
            @Html.CheckBoxFor(m => m.IsCopyable, new { @class = "copyable-checkbox", style = "display: none;", @checked = Model.IsCopyable })
        </div>
        <div>
            <button class="btn btn-primary line-number-button">Include Line Numbers</button>
            @Html.CheckBoxFor(m => m.HasLineNumbers, new { @class = "line-number-checkbox", style = "display: none;", @checked = Model.HasLineNumbers })
            @Html.LabelFor(m => m.StartingLineNumber)
            @Html.TextBoxFor(m => m.StartingLineNumber, new { id = "startingLineNumber", disabled = true })
        </div>
        <div>
            <input type="submit" value="Convert" class="btn btn-primary" style="float: right;" />
        </div>
    </div>
        }
    </div>
    <div class="col-md-6">
        <h3 class="box-header">Copy Canvas Compatible Code Here</h3>
        <div class="code-box endme">
            @Html.DisplayFor(m => m.Output)
        </div>
        <div onclick="copyTextToClipboard()" class="btn btn-primary" style="float: right; margin-top: 5px">Copy to Clipboard</div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        $('#userInput').on('input', function () {
            var linebreakText = $('#userInput').val().replace(/[\r\n|\r|\n]/ig, "reeeturn");
            var text = linebreakText.replace(/[\s \s]/ig, "&nbsp;");
            $('#inputText').val(text);
        });
    });
</script>

<script>
    function copyTextToClipboard() {
        var textArea = document.querySelector('.endme');

        if (document.selection) { // IE
            var range = document.body.createTextRange();
            range.moveToElementText(textArea);
            range.select();
        } else if (window.getSelection) {
            var range = document.createRange();
            range.selectNode(textArea);
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
        }

        try {
            var successful = document.execCommand('copy');
        } catch (err) {
            console.log('Oops, unable to copy');
        }
    }

</script>

<script>
    const terminalButton = document.querySelector('.terminal-button');
    const terminalCheckBox = document.querySelector('.terminal-checkbox');

    function handleTerminalClick(e) {
        e.preventDefault();
        terminalCheckBox.checked = !terminalCheckBox.checked;
        toggleTerminalButton(terminalCheckBox.checked);
    }

    function toggleTerminalButton(checked) {
        if (checked) {
            terminalButton.classList.remove('btn-primary');
            terminalButton.classList.add('btn-terminal');
        }
        else {
            terminalButton.classList.remove('btn-terminal');
            terminalButton.classList.add('btn-primary');
        }
    }

    terminalButton.addEventListener('click', handleTerminalClick);
</script>
<script>
    const copyableButton = document.querySelector('.copyable-button');
    const copyableCheckBox = document.querySelector('.copyable-checkbox');

    function handleCopyableClick(e) {
        e.preventDefault();
        copyableCheckBox.checked = !copyableCheckBox.checked;
        toggleCopyableButton(copyableCheckBox.checked);
    }

    function toggleCopyableButton(checked) {
        if (checked) {
            copyableButton.classList.remove('btn-primary');
            copyableButton.classList.add('btn-warning');
        }
        else {
            copyableButton.classList.remove('btn-warning');
            copyableButton.classList.add('btn-primary');
        }
    }

    copyableButton.addEventListener('click', handleCopyableClick);
</script>

<script>
    const lineNumberButton = document.querySelector('.line-number-button');
    const checkBox = document.querySelector('.line-number-checkbox');
    const lineNumInput = document.querySelector('#startingLineNumber');

    checkBox.checked = false;

    function handleLineNumberClick(e) {
        e.preventDefault();
        checkBox.checked = !checkBox.checked;
        toggleButton(checkBox.checked);
        toggleInputDisabled(checkBox.checked);
    }

    function toggleInputDisabled(checked) {
        if (checked) {
            lineNumInput.disabled = false;
        }
        else {
            lineNumInput.disabled = true;
        }
    }

    function toggleButton(checked) {
        if (checked) {
            lineNumberButton.classList.remove('btn-primary');
            lineNumberButton.classList.add('btn-success');
            lineNumberButton.innerHTML += `   <i class="glyphicon glyphicon-ok"></i>`
        }
        else {
            lineNumberButton.classList.remove('btn-success');
            lineNumberButton.classList.add('btn-primary');
            lineNumberButton.innerHTML = "Include Line Numbers";
        }
    }

    lineNumberButton.addEventListener('click', handleLineNumberClick);
</script>